{"version":3,"sources":["ShadowButton.js","Calculator.js","index.js"],"names":["ShadowButton","props","className","onClick","this","value","text","React","Component","Calculator","state","inputNum","process","current","result","operator","setNum","restart","e","val","target","numHandler","operatorHandler","selfOperatorHandler","controlHandler","console","log","num","setState","Number","stateObj","selfOper","i","lastIndexOf","Math","sqrt","substr","control","j","length","k","toString","l","style","display","flexDirection","cols","rows","textAlign","width","gridTemplateColumns","gridGap","btnHandler","bind","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a46bb224.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport './ShadowButton.scss';\r\n\r\nclass ShadowButton extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n    render(){\r\n        return (\r\n            \r\n           <div className=\"btn-container\"> \r\n           <button onClick={this.props.onClick}\r\n           className={this.props.className} value={this.props.value}>{this.props.text}\r\n           </button></div>\r\n        )\r\n    }\r\n}\r\nexport default ShadowButton;","import React, { Component } from 'react';\r\nimport Btn from './ShadowButton'\r\nimport './Calculator.scss'\r\n\r\nclass Calculator extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            inputNum:0,   //입력받은 값 (실제 계산재료이니 ★정확히 숫자로)\r\n            process:\"\",   //전체과정 (화면1)\r\n            current:\"\",   //현재과정 (화면2)\r\n            result:0,     //연산기호를 누른시점까지의 결과 (실제 계산재료이니 ★정확히 숫자로)\r\n            operator:\"\",  //연산자 \r\n            setNum:false, //연산기호를 사용한 뒤 최초의 수이니? true --> current 초기화\r\n            restart:false //'기호 =' 이후 첫 수(또는 첫 기호)이니?\r\n        }\r\n    }\r\n\r\n    //--------------------------- 모든 버튼에서 작동하는 함수(근데 이거 굳이...?) -----------------------------\r\n\r\n    btnHandler(e){ //리액트에서는 e만으로도 event를 받아온다\r\n        let val=e.target.value;\r\n        let className=e.target.className;\r\n\r\n        switch(className){ //스위치를 이용하여 className에 맞는 함수가 실행되도록 한다.\r\n           case \"num\" : this.numHandler(val); break;\r\n           case \"operator\" : this.operatorHandler(val); break;\r\n           case \"selfOperator\" : this.selfOperatorHandler(val); break;\r\n           case \"control\" : this.controlHandler(val); break; //default는 걍 생략해도 되는군\r\n        }\r\n\r\n        console.log(\"current: \"+this.state.current);//함수가 다 종료되어야 변화된 state값이 적용\r\n        console.log(\"input: \"+this.state.inputNum); //이 시점에서는 최종 변화된 값을 못읽음.\r\n    }\r\n\r\n    //---------------------------------- 숫자 버튼 --------------------------------------\r\n    numHandler(num){\r\n        //-------------------- 후에 state값으로 대입할 변수들부터 생성 ---------------------\r\n        let setNum=this.state.setNum;\r\n        let current=\"\"; //일단 늘 새로울 예정인 current는 비워 놓고\r\n        let restart=this.state.restart;\r\n        console.log(this.state.restart); //= 다음 첫 수, 즉 여기서 비로소 true로 바뀐것을 확인\r\n\r\n        if(setNum){\r\n            current+=num; //기호 사용 후 첫 num 이라면 current에 num만을 넣고\r\n            setNum=false; //true로 기능을 쓴 후에는 false로 전환해줘야지\r\n        }else{\r\n            current=this.state.current+num; //아닐땐? 기존 current(숫자겠지)에 num을 더해서 current '문자열'을 늘려가지\r\n        }\r\n\r\n        this.setState(\r\n            {\r\n                current: current,\r\n                inputNum: Number(current), //문자열로 받아둔 current를 숫자로 형변환 후 inputNum의 값으로\r\n                process: `${this.state.process+num}`, \r\n                setNum: setNum,\r\n            });\r\n\r\n        if(restart){\r\n            this.setState({\r\n                process:num,    //process를 싹 비우고 새로 입력하는 숫자만 넣는다.\r\n                restart:false,  //true로 기능을 쓴 후에는 false로 전환해줘야지\r\n            })\r\n        }\r\n    }\r\n\r\n    //-------------------------------- 이항 연산자 버튼 --------------------------------------\r\n\r\n    operatorHandler(operator){\r\n    //operator 누른 시점까지의 연산결과를 내는 재료: ★ result, operator, inputNum ★\r\n\r\n    //-------------------- 역시 state값으로 대입할 변수들부터 생성 ---------------------\r\n        let result=this.state.result;\r\n        let inputNum=this.state.inputNum;\r\n        let current=this.state.current;\r\n        let process=this.state.process;\r\n        let restart=this.state.restart;\r\n\r\n        if(this.state.restart){       // 늘 restart가 true일경우는 따로 기능check\r\n            process=result;           //★★★ state의 변경은 함수가 종료될 떄 적용된다는 점 주의\r\n            restart=false;            //true로 기능을 쓴 후에는 false로 전환해줘야지\r\n        }\r\n\r\n        //기호를 누르는 순간 묵혀뒀던 이전의 연산을 실행한다. ( result operator inputNum )\r\n        switch(this.state.operator){ //this.state.operator(이전 입력기호) != operator(현재 입력기호)\r\n            case \"\" : //저장된 기호 this.state.operator 가 없을 때 (즉 첫 이항연산 사용 시)\r\n                result=inputNum; //기존 current에 표시되던 inputNum(정확한 숫자)을 받아옴.\r\n                break;\r\n            case \"÷\" :\r\n                result/=inputNum;\r\n                break;\r\n            case \"×\" : \r\n                result*=inputNum;\r\n                break;\r\n            case \"−\" : \r\n                result-=inputNum;\r\n                break;\r\n            case \"+\" : \r\n                result+=inputNum;\r\n                break;\r\n            case \"±\" :  break; //걍..\r\n        }\r\n\r\n        process=process+operator; \r\n        \r\n        const stateObj={    // <<-- 여기서 굳이 객체를 만들어서 대입하는 이유는?? 밑에..\r\n            result : result, //위에서 연산된 바뀐 result값으로 업데이트\r\n            current: result, //이전 기호까지 계산된 결과가 화면2에 나왔으면 해\r\n            process: process,\r\n            setNum: true, //기호를 쓰고나면 setNum을 true로 줘야 다음 Num이 최초가 되지\r\n            operator: operator, //operator안에는 이번에 누른 연산기호를 in\r\n            restart: restart,\r\n        }\r\n        this.setState(stateObj);\r\n        return stateObj; // ★★★★  이렇게 return값을 반환하도록 함수를 만들면(설계하는 이유)?  ★★★ \r\n                         // 다른 곳에서 operatorHandler를 실행시킬 때 리턴되는 stateObj을 받을 수o\r\n                         // 즉 이 함수를 실행하며 산출되는 정보들을 다른 곳에서도 쓸 수 o\r\n    }\r\n\r\n    selfOperatorHandler(selfOper){\r\n        \r\n        let process=this.state.process; \r\n        let result=this.state.result;\r\n        let current=this.state.current;\r\n        let inputNum=this.state.inputNum;\r\n        let restart=this.state.restart;\r\n        \r\n        let i= this.state.process.lastIndexOf(this.state.inputNum); \r\n\r\n        //다음을 다중 if구문으로 반복코드를 줄일 수도 있을 것 같긴한데.. 일단 여기서 stop..\r\n\r\n        switch(selfOper){\r\n\r\n            case \"√\" :   //--------------------------- case 1 --------------------------------\r\n\r\n            inputNum=Math.sqrt(inputNum);\r\n\r\n            if(this.state.restart){  //'='이후 바로 루트(다른 놈들도 마찬가지)를 누른 경우라면\r\n                process=inputNum;    //process를 계산된 inputNum으로 바꾸고\r\n                result=inputNum;     //result 역시 inputNum으로 넣어둬야지\r\n            }else{\r\n                process= this.state.process.substr(0,i); // 기존 inputNum을 제외하고!!!!!!!!\r\n                process += `${inputNum}`;                // selfOper로 계산된 inputNum을 대신 넣는 작업\r\n            }            \r\n            break;\r\n\r\n            case \"𝒳²\" :  //--------------------------- case 2 --------------------------------\r\n\r\n            inputNum=inputNum*inputNum;\r\n            if(this.state.restart){\r\n                process=inputNum;\r\n                result=inputNum;\r\n            }else{\r\n                process= this.state.process.substr(0,i); // ★★ 기존 inputNum을 제외하고 ★★\r\n                process += `${inputNum}`;   \r\n            }\r\n            //process=`${this.state.process.substr(0,i)}(${inputNum})²`; //= 이후 좀 이상하게 돌아가던 코드..\r\n                break;\r\n\r\n            case \"¹/𝒳\" : //--------------------------- case 3 --------------------------------\r\n\r\n            inputNum=1/inputNum;\r\n            if(this.state.restart){\r\n                process=inputNum;\r\n                result=inputNum;\r\n            }else{\r\n                process= this.state.process.substr(0,i); // ★★ 기존 inputNum을 제외하고 ★★\r\n                process += `${inputNum}`;   \r\n            }\r\n            // process=`${this.state.process.substr(0,i)}(1/${inputNum})`; // = 이후 좀 이상하게 돌아가던 코드\r\n                break;\r\n\r\n            case \"=\" :  //--------------------------- case 4 --------------------------------\r\n\r\n            // 설계 Idea\r\n            // 예를들어 2+3= 같은경우를 보면?\r\n            // 아직 두번 째 operator가 눌리지 X 때문에 계산되지 않은 상태, 즉 이때는 result=2\r\n            // =를 누르는 순간 계산이 진행되고 진행된 result를 얻기를 바라므로 다음과 같이~!!!\r\n            // (음.. '='는 의미적으로는 self연산자 같지만 기능적으로는 이항연산자에 넣는게 편했을수도?)\r\n\r\n            if(this.state.restart){ // '=' 누른 직후 또 = 누르는건 차단\r\n                break;\r\n            }\r\n            const stateObj=this.operatorHandler(this.state.operator); //operatorHandler를 실행 & stateObj get\r\n            console.log(\"--------------stateObj---------------\");\r\n            console.log(stateObj); //이놈에서 필요한 것은 only result\r\n            console.log(result);            //result : result로 키핑해둔 값(즉 최종계산되지 않은 값)\r\n            console.log(stateObj.result);   //stateObj.result : 키를 누르며 최종 계산된 값(by operatorHandler)\r\n\r\n            result=stateObj.result;\r\n            process=`${process}=${result}`;\r\n            restart=true;\r\n                break;\r\n        }\r\n\r\n        if(selfOper == \"=\"){\r\n            this.setState({\r\n                result:result,\r\n                current: result,\r\n                operator: \"\",\r\n                process:process,\r\n                restart: restart,\r\n                setNum: true, //고렇지 신경 써줘야지\r\n                inputNum:result, // '=' 이후 바로 operator를 누르는 경우를 추적해보면.. 필요하구만!!!!\r\n            })\r\n        }else{\r\n        this.setState(\r\n                {\r\n                    result : result,\r\n                    current: inputNum,\r\n                    inputNum : inputNum,\r\n                    process: process, \r\n                }\r\n            );\r\n        }\r\n    }\r\n\r\n    controlHandler(control){\r\n        let i= this.state.process.lastIndexOf(this.state.inputNum); \r\n        console.log(i);\r\n        switch(control){\r\n            case \"ce\" :\r\n                this.setState({\r\n                    current:\"\",//화면에 표시되는 값\r\n                    inputNum:0, //입력받은 값\r\n                    process: this.state.process.substr(0,i)\r\n                })\r\n                break;\r\n                case \"c\" :\r\n                this.setState({ // 걍 초기화\r\n                    current:\"\",\r\n                    inputNum:0,\r\n                    result:0,\r\n                    process:\"\",\r\n                    operator:\"\",\r\n                    setNum:false\r\n                });    \r\n                break;\r\n                case \"back\" :\r\n                    let j= this.state.current.length;\r\n                    let k= this.state.process.length;\r\n\r\n                    console.log(this.state.inputNum);\r\n                    console.log(this.state.inputNum.toString());\r\n\r\n                    let inputNum=this.state.inputNum.toString()\r\n                    let l= inputNum.length;\r\n                    this.setState({\r\n                    inputNum: Number(inputNum.substr(0,l-1)),\r\n                    process: this.state.process.substr(0,k-1),\r\n                    current:this.state.current.substr(0,j-1), //문자열의 index=0부터 index=i-1까지 반환\r\n                }); \r\n            break;\r\n         }\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <>\r\n                <h2> Calculator </h2>\r\n                <hr></hr>\r\n                <div className=\"calculator\">\r\n                    <div className=\"tas\" style={{display: \"flex\", flexDirection:\"column\"}}>\r\n                        <div>\r\n                            <textarea cols=\"20\" rows=\"2\" value={this.state.process} style={{textAlign: \"right\"}}/>\r\n                        </div>\r\n                        <div>\r\n                            <textarea cols=\"20\" rows=\"2\" value={this.state.current} style={{textAlign: \"right\"}}/>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"btns\" style={{display: \"grid\", width:\"200px\", gridTemplateColumns: \"auto auto auto auto\", gridGap: \"10px\"}}>\r\n                        <Btn className=\"selfOperator\" value=\"√\" text=\"√\"\r\n                        onClick={(e)=>this.btnHandler(e)}></Btn>\r\n                        <Btn className=\"selfOperator\" value=\"𝒳²\" text=\"𝒳²\"\r\n                        onClick={(e)=>this.btnHandler(e)}></Btn>\r\n                        <Btn className=\"selfOperator\" value=\"¹/𝒳\" text=\"¹/𝒳\"\r\n                        onClick={(e)=>this.btnHandler(e)}></Btn>\r\n                        <Btn className=\"num\" value=\"\" text=\"\"\r\n                        onClick={(e)=>this.btnHandler(e)}></Btn>\r\n                        <Btn className=\"control\" value=\"ce\" text=\"CE\"\r\n                        onClick={(e)=>this.btnHandler(e)}></Btn>\r\n                        <Btn className=\"control\" value=\"c\" text=\"C\"\r\n                        onClick={(e)=>this.btnHandler(e)}></Btn>\r\n                        <Btn className=\"control\" value=\"back\" text=\"←\"\r\n                        onClick={(e)=>this.btnHandler(e)}></Btn>\r\n                        <Btn className=\"operator\" value=\"+\" text=\"+\"\r\n                        onClick={(e)=>this.btnHandler(e)}></Btn>\r\n                        <Btn className=\"num\" value=\"1\" text=\"1\" \r\n                        onClick={this.btnHandler.bind(this)}></Btn>\r\n                        <Btn className=\"num\" value=\"2\" text=\"2\"\r\n                        onClick={(e)=>this.btnHandler(e)}></Btn>\r\n                        <Btn className=\"num\" value=\"3\" text=\"3\"\r\n                        onClick={(e)=>this.btnHandler(e)}></Btn>\r\n                        <Btn className=\"operator\" value=\"−\" text=\"−\"\r\n                        onClick={(e)=>this.btnHandler(e)}></Btn>\r\n                        <Btn className=\"num\" value=\"4\" text=\"4\"\r\n                        onClick={(e)=>this.btnHandler(e)}></Btn>\r\n                        <Btn className=\"num\" value=\"5\" text=\"5\"\r\n                        onClick={(e)=>this.btnHandler(e)}></Btn>\r\n                        <Btn className=\"num\" value=\"6\" text=\"6\"\r\n                        onClick={(e)=>this.btnHandler(e)}></Btn>\r\n                        <Btn className=\"operator\" value=\"÷\" text=\"÷\" \r\n                        onClick={(e)=>this.btnHandler(e)}\r\n                        ></Btn>\r\n                        <Btn className=\"num\" value=\"7\" text=\"7\"\r\n                        onClick={(e)=>this.btnHandler(e)}></Btn>\r\n                        <Btn className=\"num\" value=\"8\" text=\"8\"\r\n                        onClick={(e)=>this.btnHandler(e)}></Btn>\r\n                        <Btn className=\"num\" value=\"9\" text=\"9\"\r\n                        onClick={(e)=>this.btnHandler(e)}></Btn>\r\n                        <Btn className=\"operator\" value=\"×\" text=\"x\"\r\n                        onClick={(e)=>this.btnHandler(e)}></Btn>\r\n                        <Btn className=\"num\" value=\"\" text=\"\"\r\n                        onClick={(e)=>this.btnHandler(e)}></Btn>\r\n                        <Btn className=\"num\" value=\"0\" text=\"0\"\r\n                        onClick={(e)=>this.btnHandler(e)}></Btn>\r\n                        <Btn className=\"num\" value=\"\" text=\"\"\r\n                        onClick={(e)=>this.btnHandler(e)}></Btn>\r\n                        <Btn className=\"selfOperator\" value=\"=\" text=\"=\"\r\n                        onClick={(e)=>this.btnHandler(e)}></Btn>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\nexport default Calculator;","/* eslint-disable */\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport Calc from './Calculator';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Calc/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}